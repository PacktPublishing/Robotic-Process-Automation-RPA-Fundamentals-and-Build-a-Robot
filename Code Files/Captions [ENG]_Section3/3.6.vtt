WEBVTT

0
00:02.110 --> 00:08.770
Build a robot! - part 1: In this lesson, we will have a look at the case for which we will build a

1
00:08.770 --> 00:11.750
robot and automate a simple process.

2
00:12.310 --> 00:14.730
We will have a look at the different process steps.

3
00:14.740 --> 00:20.830
We will do them manually and we'll also have a walkthrough of the solution in UiPath Studio so that

4
00:20.830 --> 00:24.940
we know our end goal before we build a robot in the next lesson.

5
00:28.590 --> 00:35.850
The situation is as follows; we have a French currency analysis firm that sends a daily report on the

6
00:35.850 --> 00:41.710
price movement of the top 20 cryptocurrencies by market capitalization to their clients.

7
00:42.570 --> 00:48.390
The complication is that the data from the report is manually collected from the website

8
00:48.390 --> 00:56.940
www.coinmarketcap.com and sent to clients every morning at 6 a.m. in both .CSV and Excel Workbook (.XLSX) file format.

9
00:57.930 --> 01:02.040
The key question is, could we somehow automate this process?

10
01:02.380 --> 01:06.900
And the answer to that question is, of course, yes!

11
01:07.440 --> 01:12.180
This sounds like a perfect process for robotic process automation technology.

12
01:15.820 --> 01:21.880
OK, so having a look at the different steps, the first step is to open the browser and we will be

13
01:21.880 --> 01:28.960
using Google Chrome in this example, although it needs us to install an extension in UiPath. Once the

14
01:28.960 --> 01:33.910
browser is open, we need to navigate to coinmarketcap.com, where we will find the data on the

15
01:33.910 --> 01:34.820
cryptocurrencies.

16
01:35.140 --> 01:41.950
And once we're at the site, step three is to copy the data on the top 20 cryptocurrencies by market capitalization.

17
01:42.640 --> 01:49.160
This data then need to be pasted into an Excel sheet and we need to save it as both .CSV and .XLSX

18
01:49.180 --> 01:49.660
file.

19
01:50.230 --> 01:53.620
And then finally, we need to mail the data to our clients.

20
01:54.970 --> 01:57.460
So let's do the process together manually.

21
01:58.870 --> 02:05.290
First, I will open the Google Chrome browser and I will navigate to coinmarketcap.com.

22
02:12.100 --> 02:17.560
And now that we're here, we can see the top 100 cryptocurrencies by market capitalization, meaning that

23
02:17.560 --> 02:20.470
the list is already in the order we want.

24
02:20.800 --> 02:30.820
So I'm just going to mark the top 20 cryptocurrencies by market capitalization and copy the data.

25
02:33.060 --> 02:41.340
Once the data is copied, I will open Excel and make a new blank workbook and paste the data.

26
02:48.660 --> 02:52.360
And then I will just clean away the last and the first column.

27
02:53.370 --> 02:56.420
OK, so now that we have the data, we just want to save it.

28
02:56.430 --> 02:58.930
And I will save it on my computer.

29
02:58.980 --> 03:00.690
I will call it "cryptodata".

30
03:01.950 --> 03:03.270
And first I'll save it

31
03:03.270 --> 03:05.070
as a Excel Workbook file.

32
03:10.040 --> 03:13.550
And then I'll save it as a .CSV file.

33
03:17.310 --> 03:22.410
Now we've actually been through the process manually, we've opened a browser, we went to the website,

34
03:22.410 --> 03:27.480
we took the data, we pasted it into Excel, and we saved it as both a comma separated values file,

35
03:27.480 --> 03:28.790
an Excel Workbook file.

36
03:29.130 --> 03:31.890
The only step remaining is to email it to clients,

37
03:31.890 --> 03:33.650
but we will not do that right now.

38
03:34.080 --> 03:37.440
So let's go through the solution in UiPath Studio.

39
03:39.540 --> 03:45.030
Here in the designer panel, you will see the workflow containing the different activities needed

40
03:45.030 --> 03:51.690
to perform our process, namely opening the browser, navigating to coinmarketcap.com, collecting

41
03:51.690 --> 03:57.990
the data and saving the data into different file types. Before we start going through the different

42
03:57.990 --> 03:58.740
activities,

43
03:58.770 --> 04:03.440
I just want to show you how to install the Google Chrome extension in UiPath.

44
04:04.260 --> 04:09.570
So then we navigate to "home" and from home we go to "tools".

45
04:10.060 --> 04:15.330
And here you see you can install the browser extension for automating websites in Chrome.

46
04:16.460 --> 04:23.360
We just click it and you see now that it was successfully installed for my user.

47
04:25.120 --> 04:30.070
You also need to enable the browser extension by navigating to Chrome extensions and then restart the

48
04:30.070 --> 04:30.610
browser.

49
04:36.130 --> 04:42.130
Now I'm going to show you what activities are here and then we build a robot together in the next lesson.

50
04:42.400 --> 04:49.920
All right, so first of all, these green boxes with text is just for information.

51
04:49.930 --> 04:51.810
It's an activity called "comment".

52
04:51.810 --> 04:55.120
So here you can basically just write what you want, to give information to

53
04:55.120 --> 04:56.800
who's ever going to look at your code.

54
04:57.520 --> 05:05.130
OK, so the first thing we want to do is to open a browser and navigate to coinmarketcap.com.

55
05:06.220 --> 05:13.090
I've just dragged the activity into the workflow here and I put in the name of the website and that's basically

56
05:13.090 --> 05:13.400
it.

57
05:13.570 --> 05:17.890
I also have to change the browser type to Chrome in the properties panel.

58
05:18.970 --> 05:29.380
Then I've added a data scraping activity and the data scraping activity was added by using the data

59
05:29.380 --> 05:33.850
scraping wizard from the design bar in the ribbon.

60
05:34.840 --> 05:39.830
So this activity will go to coinmarketcap.com and extract the data that we want.

61
05:40.330 --> 05:46.540
And here you can also see that I've chosen to close the tab and browser after the data is scraped.

62
05:47.980 --> 05:52.210
When the data is scraped, we have to save it in a data table.

63
05:52.210 --> 06:00.190
So I've created a data table variable called "dtCryptoData", and that's where the data is stored.

64
06:00.220 --> 06:01.960
So when he data is stored,

65
06:01.960 --> 06:07.660
we can write it to .CSV or write it to an .XLSX file,

66
06:07.670 --> 06:10.350
and that's what I've done in these activities.

67
06:11.110 --> 06:16.050
You can see there are no file path specified for where to save the files.

68
06:16.330 --> 06:20.550
So that means that your files will be saved into the project folder.

69
06:20.980 --> 06:25.530
I'll just open the project folder now to show you that it's empty.

70
06:26.470 --> 06:32.230
The projects folder is located in > Documents > UiPath > [Name of your robot]

71
06:32.230 --> 06:37.360
And as you can see, we only have a few files here, "Main", which is the file we're currently working

72
06:37.360 --> 06:43.690
in in UiPath. And "project" is just a .JSON file with some information about the project.

73
06:45.640 --> 06:54.490
Once we've created the files, I'll also asked UiPath to display a message box showing that the

74
06:54.490 --> 06:59.330
data was successfully scraped and saved to .CSV and .XLSX in the project folder.

75
06:59.740 --> 07:01.410
So that's pretty much it.

76
07:01.420 --> 07:02.890
That's what we want to do.

77
07:02.920 --> 07:05.490
That's our little robot automating the process.

78
07:05.770 --> 07:11.350
And if you want to challenge yourself, you may try to send the files to yourself using your preferred

79
07:11.350 --> 07:12.110
mail client.

80
07:13.360 --> 07:16.530
So let's run the robot and see what happens.

81
07:19.640 --> 07:25.550
So we see that the robot opens the browser, it gets the data, it closes the browser and the message

82
07:25.550 --> 07:29.690
box pops up; "Data successfully scraped and saved".

83
07:30.320 --> 07:35.840
So as you can see, that was done pretty quickly, although we just spent a minute doing this manually,

84
07:35.840 --> 07:38.480
the robot does it in a few seconds.

85
07:39.680 --> 07:42.620
Let's open our project folder and see.

86
07:46.850 --> 07:52.560
Yep, we have two files here, one Excel file and one .CSV file.

87
07:52.670 --> 08:00.080
So let's just open the Excel file and check that the data was scraped successfully - and it may look so.

88
08:03.640 --> 08:10.390
You can also refresh in the project activities and snippets panel and see that your files are added

89
08:10.390 --> 08:13.420
to the project folder and open the files from here.

90
08:18.360 --> 08:19.110
So that's it.

91
08:19.380 --> 08:24.690
And those of you who want to real challenge now can try to do this process without looking at the next

92
08:24.690 --> 08:25.280
lesson.

93
08:25.680 --> 08:30.660
And for those of you that want even an extra challenge, you could also add an activity to send the

94
08:30.660 --> 08:33.420
files as an email attachment to yourself.

95
08:34.260 --> 08:39.720
I would be very positively surprised if you managed to do that without having any prior knowledge of

96
08:39.720 --> 08:41.850
UiPath Studio or programming at all.

97
08:42.300 --> 08:49.020
But it is possible and you may, for example, use Google or the UiPath Community Forum to help you if you're

98
08:49.020 --> 08:49.500
stuck.

99
08:50.500 --> 08:55.500
If not, we will build this together in the next lesson, step by step.